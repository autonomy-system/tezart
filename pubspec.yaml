name: tezart
description: A Dart library to connect to Tezos clients. Send transactions and interact with smart contracts!
version: 2.0.4
homepage: https://moneytrackio.github.io/tezart/
repository: https://github.com/moneytrackio/tezart
issue_tracker: https://github.com/moneytrackio/tezart/issues

environment:
  sdk: ">=2.12.0 <3.0.0"

dependencies:
  flutter:
    sdk: flutter
  bs58check: ^1.0.2 # implementation of base58check
  bip39: ^1.0.6 # Mnemonic code for generating deterministic keys
  pointycastle: ^3.0.1 # a library that implements popular crypto algorithms
  convert: ^3.0.0 # Encoders and decoders for converting between different data representations
  dio: ^5.1.2 # http client
  equatable: ^2.0.0
  pinenacl: ^0.3.3 # Dart implementation of TweetNacl
  json_serializable: ^6.0.0 # code generation for toJson and fromJson methods
  json_annotation: ^4.3.0 # Classes and helper functions that support JSON code generation via the `json_serializable` package.
  retry: ^3.1.0 # retry a function if an error happens
  memoize: ^3.0.0 # memoize method calls
  logging: ^1.0.1 # official dart team : Provides APIs for debugging and error logging.
  ansicolor: ^2.0.1 # Use AnsiPen to add ANSI color codes to your log messages.
  collection: ^1.15.0 # Collections and utilities functions and classes related to collections
  quiver: ^3.0.1 # used to zip two lists
  meta: ^1.3.0
  pretty_dio_logger: ^1.1.1
  plugin_platform_interface: ^2.0.2

dev_dependencies:
  lints: ^1.0.1 # linter
  build_runner: ^2.0.0
  mockito: ^5.1.0 # mocks
  test: ^1.20.1
  envify: ^2.0.0 # .env files management
  envify_generator: ^2.0.0 # code generation for envify

# The following section is specific to Flutter packages.
flutter:
  # This section identifies this Flutter project as a plugin project.
  # The 'pluginClass' specifies the class (in Java, Kotlin, Swift, Objective-C, etc.)
  # which should be registered in the plugin registry. This is required for
  # using method channels.
  # The Android 'package' specifies package in which the registered class is.
  # This is required for using method channels on Android.
  # The 'ffiPlugin' specifies that native code should be built and bundled.
  # This is required for using `dart:ffi`.
  # All these are used by the tooling to maintain consistency when
  # adding or updating assets for this project.
  plugin:
    platforms:
      android:
        package: com.bitmark.tezart
        pluginClass: TezartPlugin
      ios:
        pluginClass: TezartPlugin

  # To add assets to your plugin package, add an assets section, like this:
  # assets:
  #   - images/a_dot_burr.jpeg
  #   - images/a_dot_ham.jpeg
  #
  # For details regarding assets in packages, see
  # https://flutter.dev/assets-and-images/#from-packages
  #
  # An image asset can refer to one or more resolution-specific "variants", see
  # https://flutter.dev/assets-and-images/#resolution-aware

  # To add custom fonts to your plugin package, add a fonts section here,
  # in this "flutter" section. Each entry in this list should have a
  # "family" key with the font family name, and a "fonts" key with a
  # list giving the asset and other descriptors for the font. For
  # example:
  # fonts:
  #   - family: Schyler
  #     fonts:
  #       - asset: fonts/Schyler-Regular.ttf
  #       - asset: fonts/Schyler-Italic.ttf
  #         style: italic
  #   - family: Trajan Pro
  #     fonts:
  #       - asset: fonts/TrajanPro.ttf
  #       - asset: fonts/TrajanPro_Bold.ttf
  #         weight: 700
  #
  # For details regarding fonts in packages, see
  # https://flutter.dev/custom-fonts/#from-packages